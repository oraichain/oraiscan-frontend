diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
index a770785..3f427c8 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.d.ts
@@ -58,6 +58,7 @@ export declare class CosmWasmClient {
     protected constructor(cometClient: CometClient | undefined);
     protected getCometClient(): CometClient | undefined;
     protected forceGetCometClient(): CometClient;
+    public setQueryClientWithHeight(height?: number): void;
     protected getQueryClient(): (QueryClient & AuthExtension & BankExtension & TxExtension & WasmExtension) | undefined;
     protected forceGetQueryClient(): QueryClient & AuthExtension & BankExtension & TxExtension & WasmExtension;
     getChainId(): Promise<string>;
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
index af8341d..bc91fbc 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/cosmwasmclient.js
@@ -35,6 +35,13 @@ class CosmWasmClient {
             this.queryClient = stargate_1.QueryClient.withExtensions(cometClient, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, modules_1.setupWasmExtension, stargate_1.setupTxExtension);
         }
     }
+
+    setQueryClientWithHeight(height = undefined) {
+        if (this.tmClient) {
+            this.queryClient = stargate_1.QueryClient.withExtensionsWithHeight(this.tmClient, height, stargate_1.setupAuthExtension, stargate_1.setupBankExtension, modules_1.setupWasmExtension, stargate_1.setupTxExtension);
+        }
+    }
+
     getCometClient() {
         return this.cometClient;
     }
@@ -120,12 +127,12 @@ class CosmWasmClient {
         else if ((0, stargate_1.isSearchTxQueryArray)(query)) {
             rawQuery = query
                 .map((t) => {
-                // numeric values must not have quotes https://github.com/cosmos/cosmjs/issues/1462
-                if (typeof t.value === "string")
-                    return `${t.key}='${t.value}'`;
-                else
-                    return `${t.key}=${t.value}`;
-            })
+                    // numeric values must not have quotes https://github.com/cosmos/cosmjs/issues/1462
+                    if (typeof t.value === "string")
+                        return `${t.key}='${t.value}'`;
+                    else
+                        return `${t.key}=${t.value}`;
+                })
                 .join(" AND ");
         }
         else {
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js b/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
index e5bf448..878f7e4 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/modules/wasm/queries.js
@@ -4,8 +4,8 @@ exports.setupWasmExtension = void 0;
 const encoding_1 = require("@cosmjs/encoding");
 const stargate_1 = require("@cosmjs/stargate");
 const query_1 = require("cosmjs-types/cosmwasm/wasm/v1/query");
-function setupWasmExtension(base) {
-    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
+function setupWasmExtension(base, height) {
+    const rpc = (0, stargate_1.createProtobufRpcClient)(base, height);
     // Use this service to get easy typed access to query methods
     // This cannot be used for proof verification
     const queryService = new query_1.QueryClientImpl(rpc);
diff --git a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
index 6eb95bb..24d3038 100644
--- a/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
+++ b/node_modules/@cosmjs/cosmwasm-stargate/build/signingcosmwasmclient.js
@@ -397,7 +397,10 @@ class SigningCosmWasmClient extends cosmwasmclient_1.CosmWasmClient {
             throw new Error("Failed to retrieve account from signer");
         }
         const pubkey = (0, proto_signing_1.encodePubkey)((0, amino_1.encodeSecp256k1Pubkey)(accountFromSigner.pubkey));
-        const signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
+        let signMode = signing_1.SignMode.SIGN_MODE_LEGACY_AMINO_JSON;
+        if (this.signer.signEip191) {
+            signMode = signing_1.SignMode.SIGN_MODE_EIP_191;
+        }
         const msgs = messages.map((msg) => this.aminoTypes.toAmino(msg));
         const signDoc = (0, amino_1.makeSignDoc)(msgs, fee, chainId, memo, accountNumber, sequence, timeoutHeight);
         const { signature, signed } = await this.signer.signAmino(signerAddress, signDoc);
